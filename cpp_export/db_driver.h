/*==========================================================================
##                   DB_driver
##
##              Copyright(c) 2015-2016 Yoc All rights reserved.
##
##--------------------------------------------------------------------------
## File Description
## ----------------
##      DB_driver.h 货道与MDB驱动板库头文件
##
##--------------------------------------------------------------------------
##
##  Created by	:	Yoc
##			QQ	:	1760668483
##        Date	:	2015.05.20
##============================================================================*/

#ifndef _DB_DRIVER_H_
#define _DB_DRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifdef  EV_WIN32
#define EV_EXPORT   __declspec(dllexport)
#define EV_API      __stdcall       //注意在win32平台下统一采用stdcall标准调用方式
#elif   EV_UNIX
#ifdef  EV_ANDROID
#define EV_EXPORT
#define EV_API
#else
#define EV_API
#define EV_EXPORT   __declspec(dllexport)
#endif

#else
#define EV_API
#define EV_EXPORT
#endif

/*************************************************************************
** 目标机32位 定义
**************************************************************************/
typedef unsigned char       uint8;
typedef unsigned short      uint16;
typedef unsigned int        uint32;
typedef unsigned long       uint64;
typedef  char               int8;
typedef  short              int16;
typedef  int                int32;
typedef  long               int64;




/*********************************************************************************************************
**定义通用宏函数
*********************************************************************************************************/
#define HUINT16(v)   	(((v) >> 8) & 0xFF)
#define LUINT16(v)   	((v) & 0xFF)
#define INTEG16(h,l)  	(((uint16)(h) << 8) | ((l) & 0xFF))
#define H0UINT32(n)				(uint8)(((n) >> 24) & 0xFF) //32位数值第一个高8位
#define H1UINT32(n)				(uint8)(((n) >> 16) & 0xFF) //32位数值第二个高8位
#define L0UINT32(n)				(uint8)(((n) >> 8 ) & 0xFF) //32位数值第一个低8位
#define L1UINT32(n)				(uint8)(((n) >> 0 ) & 0xFF)         //32位数值第二个低8位
#define INTEG32(h0,l0,h1,l1)	(uint32)(((uint32)(h0) << 24)|((uint32)(l0) << 16)|  \
                                          ((uint32)(h1) << 8 )|((l1) & 0xFF))



//#ifndef NULL
//#define NULL    (void *)0
//#endif


typedef struct _st_mdb_{
    uint8 bill_type;
    uint8 coin_type;
    uint8 highEnable;
}ST_MDB;












/*********************************************************************************************************
** Function name	:		EV_portRegister
** Descriptions		:		串口注册接口
** input parameters	:       portName 串口号 例如"COM1"
** output parameters:		无
** Returned value	:		成功:返回串口编号  失败:返回 -1
*********************************************************************************************************/
EV_EXPORT int32   EV_API  EV_portRegister(int8 *portName);


/*********************************************************************************************************
** Function name	:		EV_portRelease
** Descriptions		:		串口释放接口
** input parameters	:       fd 串口编号
** output parameters:		无
** Returned value	:		无
*********************************************************************************************************/
EV_EXPORT void    EV_API  EV_portRelease(int32 fd);


EV_EXPORT void   EV_API  EV_portReleaseByName(char *portName);


//============================MDB设备初始化接口============================================================//

/*********************************************************************************************************
** MDB_INIT MDB设备初始化请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口编号 串口注册成功后返回的编号
    int32 bill;         //1 表示操作纸币器  0表示不操作
    int32 coin;         //1 表示操作硬币器  0表示不操作
}ST_MDB_INIT_REQ;


/*********************************************************************************************************
** MDB_INIT MDB设备初始化回应包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //原样返回
    int32 bill;         //原样返回
    int32 coin;         //原样返回
    int32 res;          //通信结果 0通信超时   1通信成功
    int32 billResult;   //纸币器初始化结果  0失败 1成功
    int32 coinResult;   //硬币器初始化结果  0失败 1成功
}ST_MDB_INIT_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbInit
** Descriptions		:		现金模组初始化
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbInit(ST_MDB_INIT_REQ *req,ST_MDB_INIT_RPT *rpt);


//============================End=======================================================================//




//============================MDB设备使能接口============================================================//

/*********************************************************************************************************
** MDB_INIT MDB设备使能请求包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //串口 编号
    int32   bill;         //1 表示操作纸币器  0表示不操作
    int32   coin;         //1 表示操作硬币器  0表示不操作
    int32   opt;          //1 使能  0 禁能
}ST_MDB_ENABLE_REQ;

/*********************************************************************************************************
** MDB_INIT MDB设备初始化回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   bill;           //原样返回
    int32   coin;           //原样返回
    int32   opt;            //原样返回
    int32   res;            //通信结果 0通信超时   1通信成功
    int32   billResult;     //纸币器操作结果  0失败 1成功
    int32   coinResult;     //硬币器操作结果  0失败 1成功
}ST_MDB_ENABLE_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbEnable
** Descriptions		:		MDB设备使能接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbEnable(ST_MDB_ENABLE_REQ *req,ST_MDB_ENABLE_RPT *rpt);


//============================End=======================================================================//




//============================MDB现金设备心跳查询接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB现金设备心跳查询请求包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //串口 编号
}ST_MDB_HEART_REQ;

/*********************************************************************************************************
** MDB_INIT MDB现金设备心跳查询回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   res;            //通信结果 0通信超时   1通信成功
    int32 billEnable;       //纸币器使能 1使能  0禁能
    int32 billPayback;      //硬币器退币按键触发
    int32 billErr;          //纸币器故障码
                            //0:正常 1:通信故障 2:传感器故障
                            //3:出币口卡币 4:rom出错 5:进币口通道故障
                            //6:投币卡币  7:钞箱移开  8:禁能故障
                            //9:马达故障  10:纸币钞箱故障 99:其他故障
    int32 billAmount;       //纸币器收币金额
    int32 billRemain;       //纸币器储币金额

    int32 coinEnable;       //硬币器使能 1使能 0禁能
    int32 coinPayback;      //硬币器退币按键触发

    int32 coinErr;          //硬币器故障码
                            //0:正常 1:通信故障 2:传感器故障
                            //3:出币口卡币 4:rom出错 5:进币口通道故障
                            //6:投币卡币  7:币斗移开  8:禁能故障 99:其他故障

    //--------------------下面hopper字段仅当硬币找零器为hopper有效---------
    int32 isHopper;            //
    int32 hopper[8];          // hopper 0:正常 1缺币 2故障
    //--------------------End hopper-----------------------------------
    int32 coinAmount;       //硬币器收币金额
    int32 coinRemain;       //硬币器储币金额
}ST_MDB_HEART_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbHeartCheck
** Descriptions		:		MDB现金设备心跳查询接口 主要上报收币金额 所以需要每个500ms发送一次
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbHeartCheck(ST_MDB_HEART_REQ *req,ST_MDB_HEART_RPT *rpt);


//============================End=======================================================================//





//============================MDB纸币器查询接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB纸币器查询请求包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //串口 编号
}ST_MDB_BILL_INFO_REQ;

/*********************************************************************************************************
** MDB_INIT MDB纸币器查询回应包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;               //原样返回
    int32   res;            //通信结果 0通信超时   1通信成功
    int32   acceptor;       //纸币器接收器协议类型  0:纸币器被关闭  2:MDB协议
    int32   dispenser;      //纸币器找零器协议类型  0:纸币器被关闭  2:MDB协议
    char    code[3];        //厂商
    char    sn[12];         //序列号
    char    model[12];      //型号
    uint8   ver[2];         //软件版本号
    int32   capacity;       //纸币器储币容量
    int32   ch_r[16];       //纸币接收器通道面值 分为单位
    int32   ch_d[16];       //纸币找零器通道面值 分为单位
}ST_MDB_BILL_INFO_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbBillInfoCheck
** Descriptions		:		MDB纸币器查询接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbBillInfoCheck(ST_MDB_BILL_INFO_REQ *req,ST_MDB_BILL_INFO_RPT *rpt);


//============================End=======================================================================//




//============================MDB硬币器查询接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB硬币器查询请求包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //串口 编号
}ST_MDB_COIN_INFO_REQ;

/*********************************************************************************************************
** MDB_INIT MDB硬币器查询回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;               //原样返回
    int32   res;            //通信结果 0通信超时   1通信成功
    int32   acceptor;       //硬币器接收器协议类型  0:纸币器被关闭  2:MDB协议
    int32   dispenser;      //硬币器找零器协议类型  0:纸币器被关闭  2:MDB协议
    char    code[3];        //厂商
    char    sn[12];         //序列号
    char    model[12];      //型号
    uint8   ver[2];         //软件版本号
    int32   capacity;       //硬币器储币容量
    int32   ch_r[16];       //硬币接收器通道面值 分为单位
    int32   ch_d[16];       //硬币找零器通道面值 分为单位
}ST_MDB_COIN_INFO_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbCoinInfoCheck
** Descriptions		:		MDB硬币器查询接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbCoinInfoCheck(ST_MDB_COIN_INFO_REQ *req,ST_MDB_COIN_INFO_RPT *rpt);


//============================End=======================================================================//






//============================MDB设备扣款接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB设备扣款请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32   cost;       //扣款金额  分为单位
}ST_MDB_COST_REQ;

/*********************************************************************************************************
** MDB_INIT MDB设备扣款回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //原样返回
    int32   cost;         //原样返回
    int32   res;          //通信结果 0通信超时   1通信成功(同时表示扣款成功)

    int32   billAmount;   //当前纸币收币金额
    int32   coinAmount;   //当前硬币收币金额
}ST_MDB_COST_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbCost
** Descriptions		:		MDB设备扣款接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbCost(ST_MDB_COST_REQ *req,ST_MDB_COST_RPT *rpt);


//============================End=======================================================================//




//============================MDB设备退币接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB设备退币请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 bill;         //1 表示操作纸币器  0表示不操作
    int32 coin;         //1 表示操作硬币器  0表示不操作
}ST_MDB_PAYBACK_REQ;


/*********************************************************************************************************
** MDB_INIT MDB设备退币回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;           //原样返回
    int32 bill;         //原样返回
    int32 coin;         //原样返回

    int32   res;          //通信结果 0通信超时   1通信成功
    int32 billChanged;   //纸币器找币金额  分为单位
    int32 coinChanged;   //硬币器招币金额  分为单位
}ST_MDB_PAYBACK_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbPayBack
** Descriptions		:		MDB设备退币接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbPayBack(ST_MDB_PAYBACK_REQ *req,ST_MDB_PAYBACK_RPT *rpt);


//============================End=======================================================================//



//============================MDB设备找币接口============================================================//

/*********************************************************************************************************
** MDB_INIT   MDB设备找币请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 bill;         //1 表示操作纸币器  0表示不操作
    int32 coin;         //1 表示操作硬币器  0表示不操作
    int32 billPayout;   //纸币需要找币金额  分为单位
    int32 coinPayout;   //硬币需要找币金额  分为单位
}ST_MDB_PAYOUT_REQ;


/*********************************************************************************************************
** MDB_INIT MDB设备找币回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;          //原样返回
    int32 bill;         //原样返回
    int32 coin;         //原样返回
    int32 billPayout;   //原样返回
    int32 coinPayout;   //原样返回

    int32   res;          //通信结果 0通信超时   1通信成功
    int32 billChanged;   //纸币器找币金额  分为单位
    int32 coinChanged;   //硬币器招币金额  分为单位
}ST_MDB_PAYOUT_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbPayout
** Descriptions		:		MDB设备找币接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbPayout(ST_MDB_PAYOUT_REQ *req,ST_MDB_PAYOUT_RPT *rpt);

//============================End=======================================================================//



//============================hopper 设备找币接口============================================================//

/*********************************************************************************************************
**    hopper设备找币请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 no;           //hopper 编号 1开始 最大8
    int32 nums;         //需要找零的枚数
}ST_MDB_HP_PAYOUT_REQ;


/*********************************************************************************************************
** hopper设备找币回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   no;             //原样返回
    int32   nums;           //原样返回

    int32   res;          //通信结果 0通信超时   1通信成功
    int32   changed;      //实际找零额枚数

}ST_MDB_HP_PAYOUT_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbHpPayout
** Descriptions		:		hopper设备找币接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbHpPayout(ST_MDB_HP_PAYOUT_REQ *req,ST_MDB_HP_PAYOUT_RPT *rpt);

//============================End=======================================================================//




//============================MDB设备纸币器配置接口============================================================//

/*********************************************************************************************************
** MDB_BILL_CON     MDB设备纸币器配置请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 acceptor;     //收币器协议类型 2 MDB 0关闭
    int32 dispenser;    //找零器协议类型 2 MDB 0关闭
    int32 ch_r[16];     //配置纸币器接收器通道面值
    int32 ch_d[16];     //配置纸币器找零器通道面值
}ST_MDB_BILL_CON_REQ;


/*********************************************************************************************************
** MDB_BILL_CON     MDB设备纸币器配置回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32 acceptor;         //原样返回
    int32 dispenser;        //原样返回
    int32 ch_r[16];         //原样返回
    int32 ch_d[16];         //原样返回

    int32   com_ok;         //通信结果 0通信超时   1通信成功
    int32   res;            //设置结果 0失败   1成功

}ST_MDB_BILL_CON_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbBillConfig
** Descriptions		:		MDB设备纸币器配置接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbBillConfig(ST_MDB_BILL_CON_REQ *req,ST_MDB_BILL_CON_RPT *rpt);



//============================End=======================================================================//





//============================MDB设备硬币器配置接口============================================================//

/*********************************************************************************************************
** MDB_COIN_CON     MDB设备硬币器配置请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 acceptor;     //收币器协议类型 1并行脉冲硬币器 2 MDB 0关闭  3串行脉冲硬币器
    int32 high_enable;  //硬币器接收器高使能 1高使能  0低使能
    int32 dispenser;    //找零器协议类型 1 hopper找零器  2 MDB 0关闭
    int32 ch_r[16];     //配置硬币器接收器通道面值
    int32 ch_d[16];     //配置硬币器找零器通道面值
}ST_MDB_COIN_CON_REQ;




/*********************************************************************************************************
** MDB_COIN_CON     MDB设备硬币器配置回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32 acceptor;         //原样返回
    int32 high_enable;      //原样返回
    int32 dispenser;        //原样返回
    int32 ch_r[16];         //原样返回
    int32 ch_d[16];         //原样返回

    int32   com_ok;         //通信结果 0通信超时   1通信成功
    int32   res;            //设置结果 0失败   1成功

}ST_MDB_COIN_CON_RPT;


/*********************************************************************************************************
** Function name	:		EV_mdbCoinConfig
** Descriptions		:		MDB设备硬币器配置接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_mdbCoinConfig(ST_MDB_COIN_CON_REQ *req,ST_MDB_COIN_CON_RPT *rpt);



//============================End=======================================================================//









//============================BT(BENTO)货柜开门接口============================================================//

/*********************************************************************************************************
** BT_OPEN   BENTO快递柜开门请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;               //串口 编号
    int32 addr;             //快递柜地址号 默认00-15
    int32 no;               //格子号 1-88
}ST_BT_OPEN_REQ;


/*********************************************************************************************************
** BENTO_OPEN BENTO快递柜开门回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   addr;           //原样返回
    int32   no;             //原样返回
    int32   is_success;     //1:指令发送成功,0:指令发送失败(通信超时)
    int32   result;         //操作结果 0开门失败   1开门成功


}ST_BT_OPEN_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoOpen
** Descriptions		:		BENTO快递柜开门接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_bentoOpen(ST_BT_OPEN_REQ *req,ST_BT_OPEN_RPT *rpt);



/*********************************************************************************************************
** ST_COL_OPEN_REQ   BENTO货柜开门请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;               //串口 编号
    int32 addr;             //快递柜地址号 默认00-15
    int32 no;               //格子号 1-88
    int32 goc;              //出货确认
}ST_COL_OPEN_REQ;


/*********************************************************************************************************
** ST_COL_OPEN_RPT BENTO货柜开门回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   addr;           //原样返回
    int32   no;             //原样返回
    int32   is_success;     //1:指令发送成功,0:指令发送失败(通信超时)
    int32   result;         //操作结果 0开门失败   1开门成功，或者对于其他类型货道，是其他返回值


}ST_COL_OPEN_RPT;

/*********************************************************************************************************
** Function name	:		EV_columnOpen
** Descriptions		:		普通柜开门接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_columnOpen(ST_COL_OPEN_REQ *req,ST_COL_OPEN_RPT *rpt);





/*********************************************************************************************************
** BT_OPEN   BENTO快递柜开门请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;               //串口 编号
    int32 addr;             //快递柜地址号 默认00-15
    int32 no;               //格子号 1-88
}ST_LF_VENDOUT_REQ;


/*********************************************************************************************************
** BENTO_OPEN BENTO快递柜开门回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;             //原样返回
    int32   addr;           //原样返回
    int32   no;             //原样返回
    int32   is_success;     //1:指令发送成功,0:指令发送失败(通信超时)
    int32   result;         //操作结果 0开门失败   1开门成功


}ST_LF_VENDOUT_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoOpen
** Descriptions		:		BENTO快递柜开门接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_liftVendout(ST_LF_VENDOUT_REQ *req,ST_LF_VENDOUT_RPT *rpt);




//============================End=======================================================================//







//============================BT(BENTO)货柜查询接口============================================================//

/*********************************************************************************************************
** BT_CHECK   BENTO快递柜查询请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 addr;         //快递柜地址号 默认00-15
}ST_BT_CHECK_REQ;


/*********************************************************************************************************
** BENTO_CHECK BENTO快递柜查询回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;          //原样返回
    int32   addr;         //原样返回
    int32   res;        //操作结果 0查询失败   1查询成功
    int32   sum;        //格子总数
    int32   ishot;      //支持加热 1支持  0不支持
    int32   iscool;     //支持制冷  1支持  0不支持
    int32   islight;    //支持照明  1支持  0不支持
    int32   type;
    int32   id_len;     //ID长度
    char    id[20];     //ID号

}ST_BT_CHECK_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoCheck
** Descriptions		:		BENTO快递柜查询接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_bentoCheck(ST_BT_CHECK_REQ *req,ST_BT_CHECK_RPT *rpt);


//============================End=======================================================================//





//============================BT(BENTO)快递柜照明控制接口============================================================//

/*********************************************************************************************************
** BT_LIGHT   BENTO快递柜照明控制请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 addr;         //快递柜地址号 默认00-15
    int32 opt;          //操作 1开照明  0关照明
}ST_BT_LIGHT_REQ;


/*********************************************************************************************************
** BENTO_LIGHT BENTO快递柜照明控制回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;          //原样返回
    int32   addr;        //原样返回
    int32   opt;         //原样返回
    int32   res;         //操作结果 0操作失败   1操作成功

}ST_BT_LIGHT_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoLight
** Descriptions		:		BENTO快递柜照明控制接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_bentoLight(ST_BT_LIGHT_REQ *req,ST_BT_LIGHT_RPT *rpt);


//============================End=======================================================================//






//============================BT(BENTO)快递柜制冷控制接口============================================================//

/*********************************************************************************************************
** BT_LIGHT   BENTO快递柜制冷控制请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 addr;         //快递柜地址号 默认00-15
    int32 opt;          //操作 1开照明  0关照明
}ST_BT_COOL_REQ;


/*********************************************************************************************************
** BENTO_LIGHT BENTO快递柜制冷控制回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;          //原样返回
    int32   addr;        //原样返回
    int32   opt;         //原样返回

    int32   res;         //操作结果 0操作失败   1操作成功
}ST_BT_COOL_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoCool
** Descriptions		:		BENTO快递柜制冷控制接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_bentoCool(ST_BT_COOL_REQ *req,ST_BT_COOL_RPT *rpt);


//============================End=======================================================================//





//============================BT(BENTO)快递柜加热控制接口============================================================//

/*********************************************************************************************************
** BT_HOT   BENTO快递柜加热控制请求包结构体
*********************************************************************************************************/
typedef struct {
    int32 fd;           //串口 编号
    int32 addr;         //快递柜地址号 默认00-15
    int32 opt;          //操作 1开照明  0关照明
}ST_BT_HOT_REQ;


/*********************************************************************************************************
** BT_HOT BENTO快递柜加热控制回应包结构体
*********************************************************************************************************/
typedef struct {
    int32   fd;          //原样返回
    int32   addr;        //原样返回
    int32   opt;         //原样返回

    int32   res;         //操作结果 0操作失败   1操作成功
}ST_BT_HOT_RPT;


/*********************************************************************************************************
** Function name	:		EV_bentoHot
** Descriptions		:		BENTO快递柜加热控制接口
** input parameters	:       req 请求包结构体指针 rpt 回应包结构体指针
** output parameters:		无
** Returned value	:		0通信失败  1通信成功
*********************************************************************************************************/
EV_EXPORT int32  EV_API  EV_bentoHot(ST_BT_HOT_REQ *req,ST_BT_HOT_RPT *rpt);


//============================End=======================================================================//








#ifdef __cplusplus
}
#endif

#endif

